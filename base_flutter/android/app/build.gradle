def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def flutterMinSdkVersion = localProperties.getProperty('flutter.minSdkVersion')
if (flutterMinSdkVersion == null) {
    flutterMinSdkVersion = '21'
}

def flutterTargetSdkVersion = localProperties.getProperty('flutter.targetSdkVersion')
if (flutterTargetSdkVersion == null) {
    flutterTargetSdkVersion = '33'
}

def keystoresPath ="${getRootDir().absolutePath}/app/keystores";

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {

    // ----- BEGIN flavorDimensions (autogenerated by flutter_flavorizr) -----
    flavorDimensions "flavor-type"

    signingConfigs {
        releaseProd {
            storeFile file("$keystoresPath/phuhp-base-prod.keystore")
            keyAlias System.getenv('SIGNING_KEY_ALIAS')
            keyPassword System.getenv('SIGNING_KEY_PASSWORD')
            storePassword System.getenv('SIGNING_STORE_PASSWORD')
        }
        releaseStaging {
            storeFile file("$keystoresPath/phuhp-base-staging.keystore")
            keyAlias System.getenv('SIGNING_KEY_ALIAS')
            keyPassword System.getenv('SIGNING_KEY_PASSWORD')
            storePassword System.getenv('SIGNING_STORE_PASSWORD')
        }
        releaseDev {
            def keyDev = new Properties();
            def keyPropertiesFile = file("$keystoresPath/dev/key.properties")
            if (keyPropertiesFile.exists()) {
                keyPropertiesFile.withReader('UTF-8') { reader ->
                    keyDev.load(reader)
                }
            }
            storeFile file("$keystoresPath/dev/phuhp-base-dev.keystore")
            keyAlias keyDev.getProperty('key_alias')
            keyPassword keyDev.getProperty('key_password')
            storePassword keyDev.getProperty('store_password')
        }
    }

    productFlavors {
        dev {
            dimension "flavor-type"
            applicationId "com.phuhp.base.flutter.base_flutter.dev"
            resValue "string", "app_name", "Base Flutter Dev"
            signingConfig signingConfigs.releaseDev
        }
        staging {
            dimension "flavor-type"
            applicationId "com.phuhp.base.flutter.base_flutter.staging"
            resValue "string", "app_name", "Base Flutter Staging"
            signingConfig signingConfigs.releaseStaging
        }
        prod {
            dimension "flavor-type"
            applicationId "com.phuhp.base.flutter.base_flutter.prod"
            resValue "string", "app_name", "Base Flutter Prod"
            signingConfig signingConfigs.releaseProd
        }
    }

    // ----- END flavorDimensions (autogenerated by flutter_flavorizr) -----

    namespace "com.phuhp.base.flutter.base_flutter"

    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.phuhp.base.flutter.base_flutter"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion flutterMinSdkVersion.toInteger()
        targetSdkVersion flutterTargetSdkVersion.toInteger()
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        // release {
        //     // TODO: Add your own signing config for the release build.
        //     // Signing with the debug keys for now, so `flutter run --release` works.
        //     signingConfig signingConfigs.debug
        // }
        // debug {
        //     // TODO: Add your own signing config for the release build.
        //     // Signing with the debug keys for now, so `flutter run --release` works.
        //     signingConfig signingConfigs.debug
        // }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
