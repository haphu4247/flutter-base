# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Dart

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        sdk: [3.10.1]
    steps:
      
      # The flutter action needs java so include it
      - uses: actions/setup-java@v1
        with:
          java-version: '11'
      
      - name: Flutter SDK Install
        uses: subosito/flutter-action@v2.10.0
        with:
          flutter-version: ${{ matrix.sdk }}
          channel: 'stable'
          cache: true
          cache-key: flutter
          cache-path: ${{ runner.tool_cache }}/flutter
      
      - name: Install Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1
          bundler-cache: true

      # check out project
      - uses: actions/checkout@v3

      - name: Check Flutter SDK Version
        working-directory: ./base_flutter
        run: flutter --version

      - name: Install dependencies
        working-directory: ./base_flutter
        run: flutter pub get
      
      - name: Generate Text
        working-directory: ./base_flutter
        run: flutter gen-l10n --arb-dir lib/shared/languages/l10n
        
      - name: Run tests
        working-directory: ./base_flutter
        run: flutter test
      
      - name: Build Dev APK
        working-directory: ./base_flutter
        run: flutter build apk --release --flavor dev -t lib/main_dev.dart

      # - name: Build Staging APK
      #   working-directory: ./base_flutter
      #   run: flutter build apk --release --flavor staging -t lib/main_staging.dart
      
      # - name: Build Prod Appbundle
      #   working-directory: ./base_flutter
      #   run: flutter build appbundle --release --flavor prod -t lib/main_prod.dart
      #3
      - name: Upload Dev Release Build to Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Build Artifacts
          path: app/build/outputs/
      #4
      - name: Generate Release TAG
        id: dev
        run: |
          echo "::set-output name=release_dev::UserBuild_$(date +"%Y.%m.%d_%H-%M")"
       #5
      - name: Create Github Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          generate_release_notes: true
          prerelease: true
          tag_name: ${{ steps.dev.outputs.release_dev }}
          files: |
            app/build/outputs/apk/release/app-release.apk
            app/build/outputs/bundle/release/app-release.aab
